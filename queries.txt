
-- creating a database 
CREATE DATABASE ecommerce;

-- using the database 
USE ecommerce;

-- creating customers table
CREATE TABLE customers (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
email VARCHAR(100) UNIQUE NOT NULL,
address VARCHAR(255) NOT NULL
);

-- creating orders table
CREATE TABLE orders (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
customer_id INT NOT NULL,
order_date DATE NOT NULL,
total_amount INT NOT NULL,
FOREIGN KEY (customer_id) REFERENCES customers (id)
);

-- creating products table
CREATE TABLE products (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
price INT NOT NULL,
description VARCHAR(255) NOT NULL
);

-- inserting data in customer table
INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john@example.com', '123 Elm Street'),
('Jane Smith', 'jane@example.com', '456 Oak Street'),
('Emily Johnson', 'emily@example.com', '789 Maple Avenue'),
('Michael Brown', 'michael@example.com', '101 Pine Street'),
('Sarah Davis', 'sarah@example.com', '202 Birch Street'),
('David Wilson', 'david@example.com', '303 Cedar Street'),
('Laura Moore', 'laura@example.com', '404 Walnut Avenue'),
('Daniel Taylor', 'daniel@example.com', '505 Chestnut Boulevard'),
('Jessica Anderson', 'jessica@example.com', '606 Spruce Court'),
('Andrew Martinez', 'andrew@example.com', '707 Fir Lane');

-- inserting data in orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2024-12-01', 1000),
(2, '2024-12-02', 700),
(3, '2024-12-03', 100),
(4, '2024-12-04', 250),
(5, '2024-12-05', 400),
(6, '2024-12-06', 500),
(7, '2024-12-07', 300),
(8, '2024-12-08', 50),
(9, '2024-12-09', 40),
(10, '2024-12-10', 150),
(1 , '2024-11-10' , 466 ),
(5 , '2024-11-05' , 80 ),
(9 , '2024-08-15' , 2006 ),
(6 , '2024-06-23' , 678 );


-- inserting data in products table
INSERT INTO products (name, price, description) VALUES
('Laptop', 1000, 'A high-performance laptop.'),
('Smartphone', 700, 'A latest-gen smartphone.'),
('Headphones', 100, 'Noise-cancelling over-ear headphones.'),
('Smartwatch', 250, 'A smartwatch with fitness tracking.'),
('Tablet', 400, 'A lightweight tablet for work and play.'),
('Camera', 500, 'A digital camera with high resolution.'),
('Monitor', 300, 'A 24-inch full HD monitor.'),
('Keyboard', 50, 'A mechanical keyboard with backlighting.'),
('Mouse', 40, 'A wireless ergonomic mouse.'),
('Printer', 150, 'An all-in-one color printer.');


– Retrieve all customers who have placed an order in the last 30 days.
SELECT c.id , c.name , c.email , c.address , o.order_date , o.total_amount FROM customers c INNER JOIN orders o ON c.id = o.customer_id WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

– Get the total amount of all orders placed by each customer.
SELECT c.id, c.name, c.email, SUM(o.total_amount) as total_spent 
FROM customers c INNER JOIN orders o ON c.id = o.customer_id GROUP BY c.id;

– Update the price of Product C to 45.00.
UPDATE products SET price=45 WHERE name="Mouse";
SELECT * FROM products;

– Add a new column discount to the products table.
ALTER TABLE products ADD discount FLOAT;
SELECT * FROM products;

– Retrieve the top 3 products with the highest price.
SELECT * FROM products ORDER BY price DESC LIMIT 3 ;

– Get the names of customers who have ordered Product A.
– We have no tables to relate the customer , order and product. So I created an order_details table.

CREATE TABLE order_details (
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id),
    PRIMARY KEY (order_id, product_id)
);

INSERT INTO order_details (order_id, product_id, quantity) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 3, 2),
(4, 4, 1),
(5, 5, 1),
(6, 6, 1),
(7, 7, 1),
(8, 8, 2),
(9, 9, 1),
(10, 10, 1),
(1, 2, 1),
(5, 4, 2),
(9, 1, 1),
(6, 3, 1);

SELECT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id
INNER JOIN order_details od ON o.id = od.order_id 
INNER JOIN products p ON od.product_id = p.id
WHERE p.name = 'Smartphone';

– Join the orders and customers tables to retrieve the customer's name and order date for each order. 
SELECT c.name , o.order_date FROM customers c INNER JOIN 
orders o ON c.id = o.customer_id;

– Retrieve the orders with a total amount greater than 150.00.
SELECT * FROM orders WHERE orders.total_amount >= 150;

– Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.
We have already created order_details so we can use it instead of order_items.


– Retrieve the average total of all orders.
SELECT AVG(total_amount) AS average_total FROM orders;



